From: Pro ASP.NET MVC 4, Adam Freeman
* chap. 7: SportsStore--A Real Application

** 1: Create Visual Studio Solution
 File > New > Proyect
  > Installed > Templates > Other Project Types > Visual Studio Solutions
   > Blank Solution

** 2: Create Proyects
 RightClick Solution in Solution explorer
  > Add > New Project
   > Class Library

 Delete Class1.cs

 RigthClick Solution in Solution explorer
  > Add > New Project
   > ASP.NET Web Application
    > MVC

** 3: Debbug:
 RightClick SportsStore.WebUI in Solution explorer
  > Set as Startup Project

** 4: Adding References

 RightClick SportsStore.WebUI in Solution Explorer
  > Manage Nuget Packages
    Browse :
            Ninject
            Moq

 RightClick SportsStore.WebUI in Solution Explorer
  > Build Dependencies > Project Reference
    > SportsStore.Domain OK

 RightClick SportsStore.WebUI in Solution Explorer
  > Add > Reference
 (Esto no hizo falta "already...")
** 5: Setting Up the DI Container
 Create new folder within the SportsStore.WebUI project called
 Infrastructure.

 Create a class called NinjectControllerFactory:
 RightClick in Infrastructure (SolExp)
  > Add > New Item > C# Class

 with the content (p.165 [164]).

** 6: Register Ninject Controller Factory
 In thy Application_Start methon of Global.asax.cs in SportsStore.WebUI
 modify as shown in  [165].
 (tuve que instalar una libreria)

** 7: Starting the Domain Model
 Create the folder Entities inside the SportsStore.Domain project.
 Add a C# class called Product in it.

 content: [p.168]

** 8: Creating Anstract Repository
 Create a top-level folder indise SportsStore.Domain folder called
 Abstract.

 Create interface  called IProductsRepository
** 9: Making a Mock Repository
Edit SportsStore/Infrastructure/NinjectControllerFactoey.cs
(Hubo en este punto un problema con las referencias. Tuve que agregar
una referencia, así:
ClickDerecho en `References' (en SportsStore.WebUI dentro de lsolution
Explorer, add references, etc.)

(Hubo otro problema, y es que tuve que bajar una versión de Moq más
vieja de la que había)
** 10: Displaying a List of Products
*** Adding a Controller
RightClick Controllers folder in the SportsStore.WebUI and add a
Empty Controller. Name it ProductController
*** Adding the View
RightClick the List method and add View
*** Setting the default route
Editamos App_Start/RouteConfig.cs

** 11 Preparing a Database
*** Create Database
View > SQL Server Object Explorer
*** Create Table
*** Defining Database Schema
*** Adding Data to the Database
(View Data instead of Show Table Data)

*** Creating the Entity Framework Context
Instead of Code First, we'll associate our model classes with an
existing database.

1. add Entity Framework 5.0  to our SportsStore.Domain:
Right-click references in Solution Explorer > Manage NuGet

2. Create a context class to associate our model with the database
Create Concrete folder and add a new class called EFDbContext

3. Add database connection string to the Web.config file in
   Sports.Store.WebUI

*** Creating the Product Repository
1. Implement the  IProductRepository:
Add a class to the Concrete folder called >EFProductRepository.

2. Replace Ninject bindings.
Edit NinjectControllerFactory class in SportsStore.WebUI




