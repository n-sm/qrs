f <- function(x) {
x[1] <- 111
x
}
f(1:3)
x
x <- c(1,2,3:6)
x
f(x)
x
f <- function(x) {
x[1] <<- 1111
}
f(x)
x
f(x[2])
x
x
length(x)
x[6]
x[7] <- 23
x
Inf
Inf > 12
a <- b <- 1
a
b
1 <= 2
1 <= 1
3/2
ceiling(3/2)
truncate(3/2)
?trunc
floor(3/2)
source('merge-sort.R')
x
mergeSort(x)
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
x
A <- x
mergeSort(x, 1, length(x))
A
x
x
A
A[2:5]
A[2:5] <- c(4,6,2,6)
A
v
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
mergeSort(x, 1, 1)
x
A
floor(1/2)
floor(3/4)
floor(7/2)
x[1:1]
x[1:2]
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
.Primitive("sqrt")
.Primitive("sum")
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
for(k in 4:6) print k
for(k in 4:6) print( k)
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
x
length(x)
x[8]
x[8] <- 1.2
x
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
x
as.integer(x)
x <- as.integer(x)
x
mergeSort(x, 1, length(x))
mergeSort(x, 1, length(x))
x
mergeSort(x, 1, length(x))
a
A
mergeSort(A, 1, length(A))
mergeSort(A, 1, length(A))
mergeSort(x, 1, length(x))
a <- a
a <- A
a
a[8]
a[8] <- 9
a
mergeSort(a)
mergeSort(a, 1, 8)
56/4
library("Rcpp")
cppFunction('int 
ccc
ñuh
)
))))
}
cccccccccccccccccccccccc
cppFunction("int f() return 1;")
cppFunction("int f(void) return 1;")
cppFunction('int add(int x, int y, int z) {
  int sum = x + y + z;
  return sum;
}')
add(1,2,3)
cppFucntion('int f() {
return 1;
})
c
cppFucntion('int f() {
return 1;
}')
cppFunction('int f() {
return 1;
}')
f()
cppFunction("int foo() {return 1;}")
foo()
source('merge-sort.R')
x
x <- c(1,45,2,6,2,6,5,67,9)
x
length(x)
x[10]
x[10] <- 3
x
mergeSort(x,1,10)
merge
merge
mi
mimerge
source('merge-sort.R')
x
x <- c(1,2)
x
mergeSort(x,1,2)
reverse(x)
a <- c(2,1)
a
mergeSort(a,1,2)
mimerge(a,1,1,2)
x
x[1+1:2]
x[2:2]
x[(1+1):2]
x
mm2 <- function(x) {
mimerge(x, 1,1,2)
}
mm2(x)
mm2(y)
y <- c(2,1)
mm2(y)
x[1:1]
x[2:2]
cat(2)
cat("a", 2)
source('merge-sort.R')
mm2(x)
source('merge-sort.R')
mm2(x)
mm2(y)
source('merge-sort.R')
mm2(y)
source('merge-sort.R')
mm2(y)
Inf < 1
Inf <= 1
Inf <= Inf
1 <= Inf
mm2(y)
mm2(x)
source('merge-sort.R')
mm2(x)
source('merge-sort.R')
mm2(x)
mm2(y)
mm2(c(1,2,3,4,5))
mimerge(1:6,1,3,6)
source('merge-sort.R')
mimerge(1:6,1,3,6)
mimerge(1:6,1,2,6)
q()
source('merge-sort.R')
x
mmm2(1:2)
mm2(1:2)
mm2(2:1)
mm2(3:4)
mm2(4:3)
mm2(3)
mimerge(1:4,1,2,4)
source('merge-sort.R')
mimerge(1:4,1,2,4)
source('merge-sort.R')
mimerge(1:4,1,2,4)
source('merge-sort.R')
mimerge(1:4,1,2,4)
source('merge-sort.R')
mimerge(1:4,1,2,4)
mimerge(1:6,1,2,6)
mimerge(6:1,1,2,6)
mimerge(c(7:8,1:4),1,2,6)
x
x <- c(1,5,7,2,4,8,4,7,8,3,5,7)
length(x)
mergeSort(x,1,12)
?merge
ls
ls()
mergeSort(x,1,4)
mergeSort(c(x,x),1,length(x)*2)
sort
?sort
x
x <- sample(0:9, 10**10,T)
x <- sample(0:9, 10**5,T)
x
sort(x)
mergeSort(x, 1, length(x))
source('merge-sort.R')
mergeSort(x, 1, length(x))
x
x <- sample(0:9, 10**5,T)
mergeSort(x, 1, length(x))
a
x
x <- a
x <- 3
x
ls()
c
c
function(x) as.name(x)
f
f(2)
f <- function(x) as.name(x)
f
f(2)
f(c)
eval(f(c))
f <- function(x) as.name(quote(x))
f(2)
f <- function(x) as.name(quote(eval(x)))
f(3)
f(x)
quote("x")
quote(x)
x
eval(quote(x))
parse(x)
?parse
parse("x", text=T)
parse("x", text=T)
x
parse(text="x")
eval(parse(text="x"))
x
as.name(x)
as.character(x)
as.character(quote(x))
parse(text=as.character(quote(x)))
eval(parse(text=as.character(quote(x))))
eval(parse(text=as.character(quote(x))))
x
x
add1 <- function(x) {

    assign(x, x+1, envir = as.environment(pos))

    }

add1(x)ç
add1(x)
add1 <- function(x) {
    assign(x, x+1)
    }

add1(x)
x
?assign
add1 <- function(x) {
    assign(as.character(quote(x)), x+1)
    }

add1(x)
x
add1 <- function(x) {
    assign(as.character(quote(x)), x+1, envir = .GlobalEnv)
    }

add1(x)
x
add1(x)
x
filename <- 'test1.cpp'
getwd()
filename <- 'rcpp/test1.cpp'
readChar(filename, file.info(fileName)$size)
getwd()
filename
"g:/quick-refs/R/rcpp/test1.cpp"
readChar(filename, file.info(fileName)$size)
filename <- "g:/quick-refs/R/rcpp/test1.cpp"
readChar(filename, file.info(fileName)$size)
readChar(filename, file.info(filename)$size)
src <- readChar(filename, file.info(filename)$size)
getwd()
setwd("../rcpp/"
)
getwd()
list.files()
source('test.R')
fileName <- 'test.cpp'
src <- readChar(fileName, file.info(fileName)$size)

list.files()
source('test.R')
library('inline')
source('test.R')
library('Rcpp')
source('test1.R')
sourceCpp('test1-b.cpp')
sourceCpp('test2.cpp')
fibonacci(23)
fibonacci(232)
cc
ccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccc
