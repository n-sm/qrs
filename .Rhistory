ls
al <- 3
ma <- 4
ls
ls()
sc <- 39
mc <- 30
ls()
ms <- 16
ls()
parse(text="al")
eval( parse(text="al"))
eval( parse(text=ls()))
ls()
for (c in ls()) 
eval(parse(text=c))
for (c in ls()) 
print(eval(parse(text=c)))
?for
ls2lst <- function()
    for (c in ls()) {
        eval(parse(text=c))
    }
ls2lst()
l
    lst <- ls()
lst
?is.function
is.function(ls2lst)
lstf <- sapply(ls(), is.function(x))
lstf <- sapply(ls(), function(x) is.function(x))
lstf
lstf <- sapply(ls(), function(x) !is.function(x))
lstf
exists(al)
?exists
ins.function)al)
ins.function(al)
is.function(al)
is.function("al")

ls2lst <- function(strvec=ls()) {
### El argumento es un vector de strings, cada una de las cuales
    lstnf <- sapply(strvec, function(x) !is.function(x) && exists(x))
    lsr <- srtvec[lstnf]
    lsr
}

ls2lst
ls2lst()

ls2lst <- function(strvec=ls()) {
### El argumento es un vector de strings, cada una de las cuales
    lstnf <- sapply(strvec, function(x) !is.function(x) && exists(x))
    lsr <- strvec[lstnf]
    lsr
}

ls2lst()
ls()

ls2lst <- function(strvec=ls()) {
### El argumento es un vector de strings, cada una de las cuales
    lstnf <- sapply(strvec, function(x) !is.function(x) && exists(x))
    lstnf
}

ls2lst()

ls2lst <- function(strvec=ls()) {
### El argumento es un vector de strings, cada una de las cuales
    strvec
}

ls2lst()

ls2lst <- function(strvec = ls()) {
### El argumento es un vector de strings, cada una de las cuales
    strvec
    strvec
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec) strvec <- ls()
    strvec
}


ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec) strvec <- ls()
    strvec
}


ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls()
    strvec
}

ls2lst()
?ls

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    strvec
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lstnf <- sapply(strvec, function(x) !is.function(x) && exists(x))
    lstnf
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lstnf <- sapply(strvec, function(x)  exists(x) && !is.function(x))
    lstnf
}

ls2lst()
ls2lst
is.function(ls2lst)
!is.function(ls2lst)
ls()
lstf
c
rm(c)
ls()
(function(x) exists(x) && !is.function(x))(ls2lst)
exists(ls2lst) && !is.function(ls2lst))
exists(ls2lst) && !is.function(ls2lst)
exists("ls2lst") && !is.function(ls2lst)
exists("ls2lst") && !is.function("ls2lst")

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lstnf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    lstnf
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec(lvecNf)
    nfNames
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
    nfNames
}

ls2lst()
ob
lst["new"] <- 9
lst
lst <- list()
lst
lst["new"] <- 9
lst

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.

    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=c))
    }
    retlist
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.

    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=ob))
    }
    retlist
}

ls2lst()
seq_along(3)
seq_along(31)
seq_along(31:2)
lstf
eval(parse(text=lstf))
eval(parse(text="lstf"))
?substitute

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.

    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=substitute(ob)))
    }
    retlist
}

ls2lst()
?substitute

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.

    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=substitute(ob, env=enviroment())))
    }
    retlist
}

ls2lst()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.

    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=substitute(ob, env=environment())))
    }
    retlist
}

ls2lst()
ls()
rm(list(ls())
)
rm(list=ls())
ls()
a <- 1
b <- 2
ls()

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[ob] <- eval(parse(text=ob))
    }
    retlist
}

ls2lst()
ls()
ls2lst()
unalista <- list(1,2,3)
unalista
ls2lst()
ol
ol <- list()
il["l"] <- unalista
ol["l"] <- unalista
ol[["l"]] <- unalista

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el mobre de un objeto del global enviroment que no es funcion.
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[[ob]] <- eval(parse(text=ob))
    }
    retlist
}

ls2lst()
rm(list=ls())
ls()
mg <- 4
al <- 3
mc <- 30
sc <- 39
ms <- 16

ls2lst <- function(strvec = NULL) {
### El argumento es un vector de strings, cada una de las cuales
### es el nombre de un objeto del global enviroment que no es funcion.
    if(is.null(strvec)) strvec <- ls(envir=globalenv())
    lvecNf <- sapply(strvec,
                    function(x)  exists(x) &&
                        !is.function(eval(parse(text=x))))
    nfNames <- strvec[lvecNf]
### Ahora nfNames son los nombres chequeados.
    retlist <- list()
    for (ob in nfNames) {
        retlist[[ob]] <- eval(parse(text=ob))
    }
    retlist
}

cs <- ls2lst()
cs
as.vector(cs)
unlist(cs)
cs <- unlist(cs)
cs
sum(cs)
